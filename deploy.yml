apiVersion: v1
kind: Namespace
metadata:
  name: myweb

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: myweb
  labels:
    app: mysql
spec:
  ports:
    - port: 3306
      targetPort: 3306
  clusterIP: None
  selector:
    app: mysql

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: myweb
spec:
  serviceName: mysql
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql
          ports:
            - containerPort: 3306
              name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "123456"
            - name: MYSQL_DATABASE
              value: myweb
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: myweb
  labels:
    app: redis
spec:
  ports:
    - port: 6379
      targetPort: 6379
  clusterIP: None
  selector:
    app: redis

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: myweb
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379

---

apiVersion: v1
kind: Service
metadata:
  name: myweb
  namespace: myweb
  labels:
    app: myweb
spec:
  # type: NodePort
  ports:
    - port: 80
      targetPort: 8080
  #     nodePort: 30000
  selector:
    app: myweb

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myweb
  namespace: myweb
  labels:
    app: myweb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myweb
  template:
    metadata:
      labels:
        app: myweb
    spec:
      #      serviceAccount: k8s-demo
      containers:
        - name: myweb
          image: myweb
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: GIN_MODE
              value: release
          args:
            - -redisAddr=redis
            - -mysqlAddr=mysql
            - -db-pass=123456

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myweb
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  namespace: myweb
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: myweb
                port:
                  number: 80
